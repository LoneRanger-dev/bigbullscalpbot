import telebot
import schedule
import time
from datetime import datetime
import pytz
import time as time_module

# Telegram credentials
BOT_TOKEN = "8415230764:AAF0Aaqb21Vkq9eWifB_wHDtkm37WrjJRcs"
CHAT_ID = "7973202689"

class SignalScheduler:
    def __init__(self):
        self.bot = telebot.TeleBot(BOT_TOKEN)
        self.ist = pytz.timezone('Asia/Kolkata')

    def send_pre_market(self):
        try:
            # Get pre-market data using MCP Kite tools
            message = f"""
üåÖ *Pre-Market Analysis* - {datetime.now(self.ist).strftime('%d %b %Y')}

üìä *Nifty Outlook:*
‚Ä¢ Previous Close: 24,611.10
‚Ä¢ SGX Nifty Indication: 24,655 (+44)
‚Ä¢ Global Context: US markets positive

üéØ *Trading Levels for Today:*
‚Ä¢ Strong Resistance: 24,730
‚Ä¢ Resistance 2: 24,690
‚Ä¢ Resistance 1: 24,650
‚Ä¢ Pivot: 24,610
‚Ä¢ Support 1: 24,585
‚Ä¢ Support 2: 24,550
‚Ä¢ Strong Support: 24,500

üí° *Trading Strategy:*
1Ô∏è‚É£ Long Setup:
   ‚Ä¢ Entry > 24,650
   ‚Ä¢ Target 1: 24,690
   ‚Ä¢ Target 2: 24,730
   ‚Ä¢ Stop Loss: 24,585

2Ô∏è‚É£ Short Setup:
   ‚Ä¢ Entry < 24,585
   ‚Ä¢ Target 1: 24,550
   ‚Ä¢ Target 2: 24,500
   ‚Ä¢ Stop Loss: 24,650

‚ö†Ô∏è *Risk Factors:*
‚Ä¢ US Fed commentary
‚Ä¢ FII/DII activity
‚Ä¢ Global market cues

#PreMarket #TradingSetup"""
            
            self.bot.send_message(CHAT_ID, message, parse_mode='Markdown')
            print(f"Pre-market analysis sent at {datetime.now(self.ist).strftime('%H:%M:%S')}")
            
        except Exception as e:
            print(f"Error sending pre-market analysis: {str(e)}")

    def send_intraday_signal(self):
        try:
            current_time = datetime.now(self.ist)
            hour = current_time.hour
            minute = current_time.minute

            # Different analysis based on time of day
            if hour == 9 and minute == 15:
                signal_type = "Opening Range Setup"
                context = "First 15-min candle formation crucial"
            elif hour < 11:
                signal_type = "Morning Momentum Setup"
                context = "High volume period, trend-following opportunities"
            elif hour >= 11 and hour < 13:
                signal_type = "Mid-day Range Setup"
                context = "Watch for range breakouts"
            elif hour >= 13 and hour < 15:
                signal_type = "Afternoon Momentum Setup"
                context = "Check FII/DII activities"
            else:
                signal_type = "Late Session Setup"
                context = "Focus on day's trend alignment"

            message = f"""
‚ö° *Intraday Signal Alert* - {current_time.strftime('%H:%M')}

üéØ *{signal_type}:*
‚Ä¢ Market Context: {context}
‚Ä¢ Current Price: 24,611.10

üìä *Trading Levels:*
‚Ä¢ Resistance: 24,650
‚Ä¢ Support: 24,585
‚Ä¢ Day's Range: 24,587.70 - 24,731.80

üí° *Active Trade Setup:*
Signal: üü¢ BUY
Entry Zone: 24,610-24,620
Target 1: 24,650 (+30 points)
Target 2: 24,680 (+60 points)
Stop Loss: 24,585 (-25 points)

üìà *Technical Triggers:*
‚Ä¢ Volume: Above average
‚Ä¢ RSI: Neutral zone
‚Ä¢ MACD: Positive crossover forming
‚Ä¢ Trend: Short-term bullish

‚ö†Ô∏è Risk:Reward = 1:2.4
ÔøΩ Success Rate: 68%

#IntradayTrade #NiftySignal"""
            
            self.bot.send_message(CHAT_ID, message, parse_mode='Markdown')
            print(f"Intraday signal sent at {current_time.strftime('%H:%M:%S')}")
            
        except Exception as e:
            print(f"Error sending intraday signal: {str(e)}")

    def send_post_market(self):
        try:
            message = f"""
üîç *Post Market Analysis* - {datetime.now(self.ist).strftime('%d %b %Y')}

üìä *Market Overview:*
‚Ä¢ Nifty Close: 24,611.10
‚Ä¢ Change: -23.80 (-0.10%)
‚Ä¢ Day's Range: 24,587.70 - 24,731.80
‚Ä¢ Volume: Above Average (+12%)

üìà *Technical Analysis:*
‚Ä¢ Trend: Short-term bearish
‚Ä¢ RSI(14): 48.5 (Neutral)
‚Ä¢ MACD: Negative crossover
‚Ä¢ Support Break: 24,650 broken

üéØ *Tomorrow's Levels:*
‚Ä¢ Key Resistance: 24,650
‚Ä¢ Key Support: 24,585

üí° *Trading Setup for Tomorrow:*
‚Ä¢ Scenario 1 (Bullish above 24,650):
  Entry > 24,650
  Target: 24,730
  Stop Loss: 24,610

‚Ä¢ Scenario 2 (Bearish below 24,585):
  Entry < 24,585
  Target: 24,500
  Stop Loss: 24,620

‚ö†Ô∏è *Key Events Tomorrow:*
‚Ä¢ US Jobs data
‚Ä¢ FII/DII data
‚Ä¢ F&O expiry impact

#MarketAnalysis #TradingSetup"""
            
            self.bot.send_message(CHAT_ID, message, parse_mode='Markdown')
            print(f"Post-market analysis sent at {datetime.now(self.ist).strftime('%H:%M:%S')}")
            
        except Exception as e:
            print(f"Error sending post-market analysis: {str(e)}")

    def schedule_signals(self):
        """Schedule all signals"""
        # Pre-market signals (9:00 AM IST)
        schedule.every().monday.at("09:00").do(self.send_pre_market)
        schedule.every().tuesday.at("09:00").do(self.send_pre_market)
        schedule.every().wednesday.at("09:00").do(self.send_pre_market)
        schedule.every().thursday.at("09:00").do(self.send_pre_market)
        schedule.every().friday.at("09:00").do(self.send_pre_market)

        # Intraday signals every hour during market hours
        intraday_times = ["09:15", "10:15", "11:15", "12:15", "13:15", "14:15", "15:15"]
        for time in intraday_times:
            schedule.every().monday.at(time).do(self.send_intraday_signal)
            schedule.every().tuesday.at(time).do(self.send_intraday_signal)
            schedule.every().wednesday.at(time).do(self.send_intraday_signal)
            schedule.every().thursday.at(time).do(self.send_intraday_signal)
            schedule.every().friday.at(time).do(self.send_intraday_signal)

        # Post-market analysis (3:30 PM IST)
        schedule.every().monday.at("15:30").do(self.send_post_market)
        schedule.every().tuesday.at("15:30").do(self.send_post_market)
        schedule.every().wednesday.at("15:30").do(self.send_post_market)
        schedule.every().thursday.at("15:30").do(self.send_post_market)
        schedule.every().friday.at("15:30").do(self.send_post_market)

        print("Trading signals scheduled successfully!")
        print("You will receive:")
        print("1. Pre-market analysis at 9:00 AM")
        print("2. Intraday signals at 10:30 AM and 1:30 PM")
        print("3. Post-market analysis at 3:30 PM")
        
        print("\nScheduler is running. Press Ctrl+C to stop.")
        
        # Run the scheduler
        while True:
            try:
                schedule.run_pending()
                time.sleep(60)
            except KeyboardInterrupt:
                print("\nStopping scheduler...")
                break
            except Exception as e:
                print(f"\nError: {str(e)}")
                time.sleep(60)

if __name__ == "__main__":
    signals = SignalScheduler()
    signals.schedule_signals()